Comandos GIT 

Git fue creado por el mismo creador de Linux lo que hace que su consola sea
basada en linux

-GIT es una herramienta para el manejo de versiones 
-GitHub es una plataforma para montar o alojar proyectos(repositorios) de forma gratuita

Estados para el manejo de versiones  
Working directory - Staging area - .git diretory (Reposiotrio)
-- CMD o Windows
dir --> motrasr la lista de directorios en la ruta actual


--Linux 
ls  -->listar directorios de la ruta actual
ls -a  -->listar directorios y archivos incluyendo los que están ocultos 
ls -al -->Listar archivos y directorios con información detallada 
pwd -->Mostrar en que ruta esta ubicado actualmente 
touch --> Crear archivos 
mkdir <nombreDirectorio> --> Crear directorios(carpetas)
rm [file]  -->remover un archivo
ctrk + l --> Limpiar la consola 
-----

//Hoja de comandos mas usados 
https://training.github.com/downloads/es_ES/github-git-cheat-sheet.pdf

git --version   -->Saber que version de git esta instalada en la maquina 

//Configuración 
git config --global user.name "nombreuser"--> Cambiar o fijar nombre de usuario 
git config --global user.email "correo" --> Cabiar o fijar correo de git 
git config --list --> Lista de configuracion global en nuestra maquina 
git config --global alias.[alias] "comando al que se le quiere poner un alias"  //'log --graph --decorate --all --oneline'
git remote add origin [url] -->para conectar el repositorio local con la nube

//Crear Repositorios
git init [proyect-name]  --> Inicializar un proyecto
git clone [url] --> Clonar un repositorio de la nuve
git clone --branch [branch] --single-branch [url] -> Clonar un repositorio de una rama especifica


//Cambios 
git status  -->ver archivos modificados o estado de lo que estamos trabajando 
git add README.md --> agregar README al repositorio o proyecto 

git diff -->comparar archivo de stagin con archivo local permite ver diferencias
git diff [branch] --> ver las diferencias o cambios entre las ramas
git diff [local-branch] origin/[remote-branch]  --> ver las diferencias entre rama local y rama remota  

git add .               --> agregar todos los archivos modificados al staging area 
git add [file]   -->Agregar por archivo modificado al staging area 

git reset HEAD [file] -->Para resetear el ultimo commit  que se agrego y desahacer una modificación, eliminar commit del stage
git reset --hard [hash]  -->ubicarse en un momento especifico de los commits

git commit -m "[descriptive-message]" -->agregar un comentario a los archivos que estan en stage
git commit --amend "[descriptive-message]"-->editar la descripcion de un commit, solo al más reciente


// Ramas 
git branch --> Mostrar ramas que se han creado en el proyecto actual
git branch [branch-name]  --> Crear un nueva rama de forma local 
git branch -d [branch-name] -->Eliminar rama
git branch -m [branch-name]  --> Cambiar el nombre de una rama

git checkout [branch-name]  --> descargar los cambios de la rama y Cambiar de rama
git cheackout -b [branch-name] --> crear rama y cambiar directamente a esa rama 
git swicth [branch-name] --> Cambiar de rama 

git merge [branch-name] -->Combinar cambios de la rama espeficada con la rama actual


//Historial de cambios
git log --> Para ver los commits o lista de cambios que se han hecho
git log --graph  --> ver los commits como una rama o el orden 
git log --graph  --pretty=oneline  --> ver los commits realizados de manera resumida en una linea
git log --graph --decorate --all --oneline --> Abreviar el hash del commit y ver todos los commits en una linea 

git reflog   --> historial de interaciones que se han hecho en el git 

git checkout [hash] -->Revertir cambios a commits anteriores 
git checkout [file] -->Revertir los cambios de un archivo especifio a su version anterior
gti checkout HEAD  --> ubicar el track (hash) donde nos encontramos adelante 


//Guardar Fragmentos 
git stash -->guardar cambios de manera temporal sin que sea un commit y afecte el arbol
git stash pop -->Recuperar o volver a un stash guardado
git stash list --> mostrar la lista de de cambios guardados que no se han subido 
git stash apply [posicionStash] -->aplicar ciertos cambios que estan en Stash
git stash drop --> eliminar  un stash 


//tags 
git tag --> ver los tags que se han creado
git tag [tag-name] --> nombrar una parte de lo que se ha hecho.(identificar)
git  checkout tag/[tag-name]  --> Cambiar a un tag en especifico


//Sincronizar cambios 
git fetch -->descargar el historial de cambios del repositorio
git push  -->Subir  los cambios o commits de la rama local  a respositorio 
git push -u origin [branch-name] -->Para subir los cambios de stage al repositorio por primera vez
git push orgin [branch-name]  -->subir cambios a la rama espeficada
git pull origin [branch-name] -->Descargar historial e incomporar cambios a nuestro respositorio
git pull --> descargar  historial e incorporarcambios sin  indicar la rama 


//Resolver errores
git pull origin main --allow-unrelated-histories --> permitir el merge de rama local con rama remota cuando hay diferencias
git merge origin origin/main

//Consola
clear -->Limpiar la consola 


// Flujo de trabajo colaborativo con PRs (Pull Request)
Si no puedes  subir tus cambios al respositorio original, por algun motivo como permisos, o el repo es privado o simplemente quieres colaboara ens ese repositorio, puedes seguir los siguientes pasos:

- Hacer un fork del repositorio original 
- Clonar el repositorio para que se descarguen en tu maquina
- Realizar los cambios que quieres o necesita el proyecto 
- subir los cambios al repo 
- hacer un pull request al repo original
- esperar la probación del pull request del propietario del repo

//Flujos de trabajo Git y GitHub
Flujo git 

- Main 
- Develop
- Feacture 
- Realese
- Hotfix

https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow

//Instalar git-flow 

brev  install git-flow --> Instalar git flow en un proyecto 
git flow  --> Motrar subcomandos  a ejecutar con git flow 
git flow init --> inicializar un proyecto con git-flow
git flow [subcomando] start  [name-branch]  --> iniciar una rama segun el flujo 
git flow [subcomando] finish  [name-branch]  --> cerrar una rama segun el flujo  
 

Flujo GitHub

Consta de crear ramas sin nungun orden o estandar de trabajo

https://www.gitkraken.com/learn/git/best-practices/git-branch-strategy


//GIT-HUB Pages 

Git-hub pages es el servicio que nos permite desplegar nuestros proyecto sin no tenemos un hosting y un dominio, su alcance es limitado pero es muy util para proyectos con HTML, CSS, JAVASCRIPT, algun framework como Angula, React, Vue.

Dejo el enlance para que te informes un poco más sobre este:
https://pages.github.com/


//Automatizaciones con GitHub 
https://github.com/features/actions

//Comandos más avanzados 

git cherry-pick  [commit]-->
git cherry-pick --continue -->
git cherry-pick --abort 


git rebase [name-branch]--> traer una rama a un punto concreto  y modificar historial de los commits
git rebase -i    -->
git rebase --continue --> Para continuar la ejecucion de un rebase.
git rebase --abort  --> para cancelar la ejecucion del rebase 


git log -p
git diff --> ver cambios que se han hecho a archivos que no estan en el stage 
git diff [hash]..[hash]  -->verdiferencias o todos los cambios en el tiempo
 



